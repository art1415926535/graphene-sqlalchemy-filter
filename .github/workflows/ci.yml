name: CI

on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - master

env:
  DEFAULT_PYTHON_VERSION: 3.13

jobs:
  lint:
    name: Lint 🧐
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint
        uses: astral-sh/ruff-action@v3
        with:
          version: 0.12.7

  test:
    name: Test 🤔
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        graphene-sqlalchemy-version: ['2.1', '2.2', '2.3', '3.0']
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[ci]

      - name: Set environment variable for Tox Python version
        run: |
          TOX_PYTHON_VERSION=${{ matrix.python-version }}
          TOX_PYTHON_VERSION=${TOX_PYTHON_VERSION//.}
          echo "TOX_ENV=py${TOX_PYTHON_VERSION}-gs${{ matrix.graphene-sqlalchemy-version }}" >> $GITHUB_ENV

      - name: Test with tox
        run: tox -e ${{ env.TOX_ENV }}

      - name: Show files
        run: |
          ls -la .

      - name: Generate xml coverage report
        run: |
          coverage combine
          coverage xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          files: "coverage.xml"
          flags: ${{ env.TOX_ENV }}
          verbose: true
          use_oidc: true

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: python -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-test-pypi:
    name: Publish Python 🐍 distribution 📦 to Test PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/graphene-sqlalchemy-filter
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/graphene-sqlalchemy-filter
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
